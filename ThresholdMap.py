import numpy as np

class ThresholdMap:

	Mat_2 = np.array([[0.  , 0.5 ],
       [0.75, 1.  ]])
	Mat_4 = np.array([[0.    , 0.5   , 0.125 , 0.625 ],
       [0.75  , 1.    , 0.875 , 1.125 ],
       [0.1875, 0.6875, 0.25  , 0.75  ],
       [0.9375, 1.1875, 1.    , 1.25  ]])
	Mat_8 = np.array([[0.      , 0.5     , 0.125   , 0.625   , 0.03125 , 0.53125 ,
        0.15625 , 0.65625 ],
       [0.75    , 1.      , 0.875   , 1.125   , 0.78125 , 1.03125 ,
        0.90625 , 1.15625 ],
       [0.1875  , 0.6875  , 0.25    , 0.75    , 0.21875 , 0.71875 ,
        0.28125 , 0.78125 ],
       [0.9375  , 1.1875  , 1.      , 1.25    , 0.96875 , 1.21875 ,
        1.03125 , 1.28125 ],
       [0.046875, 0.546875, 0.171875, 0.671875, 0.0625  , 0.5625  ,
        0.1875  , 0.6875  ],
       [0.796875, 1.046875, 0.921875, 1.171875, 0.8125  , 1.0625  ,
        0.9375  , 1.1875  ],
       [0.234375, 0.734375, 0.296875, 0.796875, 0.25    , 0.75    ,
        0.3125  , 0.8125  ],
       [0.984375, 1.234375, 1.046875, 1.296875, 1.      , 1.25    ,
        1.0625  , 1.3125  ]])
	Mat_16 = np.array([[0.        , 0.5       , 0.125     , 0.625     , 0.03125   ,
        0.53125   , 0.15625   , 0.65625   , 0.0078125 , 0.5078125 ,
        0.1328125 , 0.6328125 , 0.0390625 , 0.5390625 , 0.1640625 ,
        0.6640625 ],
       [0.75      , 1.        , 0.875     , 1.125     , 0.78125   ,
        1.03125   , 0.90625   , 1.15625   , 0.7578125 , 1.0078125 ,
        0.8828125 , 1.1328125 , 0.7890625 , 1.0390625 , 0.9140625 ,
        1.1640625 ],
       [0.1875    , 0.6875    , 0.25      , 0.75      , 0.21875   ,
        0.71875   , 0.28125   , 0.78125   , 0.1953125 , 0.6953125 ,
        0.2578125 , 0.7578125 , 0.2265625 , 0.7265625 , 0.2890625 ,
        0.7890625 ],
       [0.9375    , 1.1875    , 1.        , 1.25      , 0.96875   ,
        1.21875   , 1.03125   , 1.28125   , 0.9453125 , 1.1953125 ,
        1.0078125 , 1.2578125 , 0.9765625 , 1.2265625 , 1.0390625 ,
        1.2890625 ],
       [0.046875  , 0.546875  , 0.171875  , 0.671875  , 0.0625    ,
        0.5625    , 0.1875    , 0.6875    , 0.0546875 , 0.5546875 ,
        0.1796875 , 0.6796875 , 0.0703125 , 0.5703125 , 0.1953125 ,
        0.6953125 ],
       [0.796875  , 1.046875  , 0.921875  , 1.171875  , 0.8125    ,
        1.0625    , 0.9375    , 1.1875    , 0.8046875 , 1.0546875 ,
        0.9296875 , 1.1796875 , 0.8203125 , 1.0703125 , 0.9453125 ,
        1.1953125 ],
       [0.234375  , 0.734375  , 0.296875  , 0.796875  , 0.25      ,
        0.75      , 0.3125    , 0.8125    , 0.2421875 , 0.7421875 ,
        0.3046875 , 0.8046875 , 0.2578125 , 0.7578125 , 0.3203125 ,
        0.8203125 ],
       [0.984375  , 1.234375  , 1.046875  , 1.296875  , 1.        ,
        1.25      , 1.0625    , 1.3125    , 0.9921875 , 1.2421875 ,
        1.0546875 , 1.3046875 , 1.0078125 , 1.2578125 , 1.0703125 ,
        1.3203125 ],
       [0.01171875, 0.51171875, 0.13671875, 0.63671875, 0.04296875,
        0.54296875, 0.16796875, 0.66796875, 0.015625  , 0.515625  ,
        0.140625  , 0.640625  , 0.046875  , 0.546875  , 0.171875  ,
        0.671875  ],
       [0.76171875, 1.01171875, 0.88671875, 1.13671875, 0.79296875,
        1.04296875, 0.91796875, 1.16796875, 0.765625  , 1.015625  ,
        0.890625  , 1.140625  , 0.796875  , 1.046875  , 0.921875  ,
        1.171875  ],
       [0.19921875, 0.69921875, 0.26171875, 0.76171875, 0.23046875,
        0.73046875, 0.29296875, 0.79296875, 0.203125  , 0.703125  ,
        0.265625  , 0.765625  , 0.234375  , 0.734375  , 0.296875  ,
        0.796875  ],
       [0.94921875, 1.19921875, 1.01171875, 1.26171875, 0.98046875,
        1.23046875, 1.04296875, 1.29296875, 0.953125  , 1.203125  ,
        1.015625  , 1.265625  , 0.984375  , 1.234375  , 1.046875  ,
        1.296875  ],
       [0.05859375, 0.55859375, 0.18359375, 0.68359375, 0.07421875,
        0.57421875, 0.19921875, 0.69921875, 0.0625    , 0.5625    ,
        0.1875    , 0.6875    , 0.078125  , 0.578125  , 0.203125  ,
        0.703125  ],
       [0.80859375, 1.05859375, 0.93359375, 1.18359375, 0.82421875,
        1.07421875, 0.94921875, 1.19921875, 0.8125    , 1.0625    ,
        0.9375    , 1.1875    , 0.828125  , 1.078125  , 0.953125  ,
        1.203125  ],
       [0.24609375, 0.74609375, 0.30859375, 0.80859375, 0.26171875,
        0.76171875, 0.32421875, 0.82421875, 0.25      , 0.75      ,
        0.3125    , 0.8125    , 0.265625  , 0.765625  , 0.328125  ,
        0.828125  ],
       [0.99609375, 1.24609375, 1.05859375, 1.30859375, 1.01171875,
        1.26171875, 1.07421875, 1.32421875, 1.        , 1.25      ,
        1.0625    , 1.3125    , 1.015625  , 1.265625  , 1.078125  ,
        1.328125  ]])

	@staticmethod
	def Mat2N(n:int) -> np.ndarray:
		assert not(n%2) and (type(n) is int)
		if n > 2:
			return np.kron(np.ones((2, 2)), ThresholdMap.Mat2N(n//2)) + np.kron(ThresholdMap.Mat_2, np.ones((n//2, n//2)))/((n/2)**2)
		else:
			return ThresholdMap.Mat_2
